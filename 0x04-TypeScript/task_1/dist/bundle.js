!function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t){var o;console.log((o="Doe","John".charAt(0)+" "+o));!function(){function e(e,t){this.firstName=e,this.lastName=t}e.prototype.workOnHomework=function(){return"Currently working"},e.prototype.displayName=function(){return this.firstName}}();var r=function(){function e(){}return e.prototype.workFromHome=function(){return"Working from home"},e.prototype.getCoffeeBreak=function(){return"Getting a coffee break"},e.prototype.workDirectorTasks=function(){return"Getting to Director tasks"},e}(),n=function(){function e(){}return e.prototype.workFromHome=function(){return"Working from home"},e.prototype.getCoffeeBreak=function(){return"Cannot have a break"},e.prototype.workTeacherTasks=function(){return"Getting to work"},e}();function u(e){return"number"==typeof e&&e<500?new n:new r}console.log(u(200)),console.log(u(1e3)),console.log(u("$500"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,